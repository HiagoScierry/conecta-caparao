name: Deploy Actions

on:
  workflow_call:
    inputs:
      environment:
        description: 'Deployment environment (staging, production)'
        required: true
        type: string
      project-path:
        description: 'Project path on server'
        required: false
        type: string
        default: '/opt/conecta-caparao'
      docker-compose-file:
        description: 'Docker compose file to use'
        required: false
        type: string
        default: 'docker-compose.prod.yaml'
      health-check-url:
        description: 'Health check endpoint'
        required: false
        type: string
        default: 'http://localhost:3000/api/health'
    secrets:
      VPC_SSH_PRIVATE_KEY:
        required: true
      VPC_HOST:
        required: true
      VPC_USER:
        required: true
      VPC_PROJECT_PATH:
        required: false

jobs:
  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPC_SSH_PRIVATE_KEY }}
          
      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.VPC_HOST }} >> ~/.ssh/known_hosts
          
      - name: Deploy to Server
        run: |
          ssh ${{ secrets.VPC_USER }}@${{ secrets.VPC_HOST }} << 'EOF'
            set -e
            
            echo "🚀 Starting ${{ inputs.environment }} deployment process..."
            
            # Navigate to project directory
            cd ${{ secrets.VPC_PROJECT_PATH || inputs.project-path }}
            
            # Pull latest changes from main branch
            echo "📥 Pulling latest changes from main branch..."
            git fetch origin
            git checkout main
            git pull origin main
            
            # Stop existing containers
            echo "🛑 Stopping existing containers..."
            docker-compose -f ${{ inputs.docker-compose-file }} down || true
            
            # Clean up old images (optional)
            echo "🧹 Cleaning up unused Docker resources..."
            docker system prune -f || true
            
            # Pull/build and start new containers
            echo "🏗️ Building and starting new containers..."
            docker-compose -f ${{ inputs.docker-compose-file }} pull || true
            docker-compose -f ${{ inputs.docker-compose-file }} build --no-cache
            docker-compose -f ${{ inputs.docker-compose-file }} up -d
            
            # Wait for services to be ready
            echo "⏳ Waiting for services to be ready..."
            sleep 30
            
            # Check if containers are running
            echo "🔍 Checking container status..."
            docker-compose -f ${{ inputs.docker-compose-file }} ps
            
            # Check application health
            echo "❤️ Checking application health..."
            timeout 60 bash -c 'until curl -f ${{ inputs.health-check-url }} 2>/dev/null; do echo "Waiting for app..."; sleep 5; done' || echo "Health check timeout - check logs manually"
            
            echo "✅ ${{ inputs.environment }} deployment completed successfully!"
            echo "🎉 Application is now running in ${{ inputs.environment }}"
          EOF
          
      - name: Verify deployment
        run: |
          echo "🔍 Verifying ${{ inputs.environment }} deployment..."
          ssh ${{ secrets.VPC_USER }}@${{ secrets.VPC_HOST }} << 'EOF'
            cd ${{ secrets.VPC_PROJECT_PATH || inputs.project-path }}
            
            echo "📊 Container status:"
            docker-compose -f ${{ inputs.docker-compose-file }} ps
            
            echo "📝 Recent logs (last 20 lines):"
            docker-compose -f ${{ inputs.docker-compose-file }} logs --tail=20
            
            echo "🔍 Git status:"
            git log --oneline -3
            git status --porcelain
          EOF
          
      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "🎉 ${{ inputs.environment }} Deployment SUCCESS!"
            echo "✅ Application deployed and running"
            echo "🏷️ Tag: ${{ steps.tag.outputs.result }}"
            echo "🔗 Check your domain for the updated application"
          else
            echo "❌ ${{ inputs.environment }} Deployment FAILED!"
            echo "🔍 Check the logs above for error details"
            echo "🚨 Manual intervention may be required"
          fi
