name: Production CD

on:
  push:
    branches: [ main ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint

  test:
    name: Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup environment variables
        run: |
          echo "DATABASE_URL=mysql://root:root@localhost:3306/test_db" >> $GITHUB_ENV
          echo "NEXTAUTH_SECRET=test-secret" >> $GITHUB_ENV
          echo "NEXTAUTH_URL=http://localhost:3000" >> $GITHUB_ENV
          
      - name: Generate Prisma Client
        run: npx prisma generate
        
      - name: Run database migrations
        run: npx prisma migrate deploy
        
      - name: Run tests
        run: npm test

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup environment variables for build
        run: |
          echo "DATABASE_URL=mysql://user:password@localhost:3306/conecta_caparao" >> $GITHUB_ENV
          echo "NEXTAUTH_SECRET=build-secret" >> $GITHUB_ENV
          echo "NEXTAUTH_URL=http://localhost:3000" >> $GITHUB_ENV
          
      - name: Generate Prisma Client
        run: npx prisma generate
        
      - name: Build application
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: |
            .next/
            package.json
            package-lock.json
          retention-days: 30

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level=high
        
      - name: Check for vulnerabilities
        run: npm audit --audit-level=moderate

  deploy-ready:
    name: Deploy Ready
    runs-on: ubuntu-latest
    needs: [build, security]
    if: success()
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build
          
      - name: Notify deployment ready
        run: |
          echo "ðŸš€ Build completed successfully!"
          echo "âœ… All checks passed - ready for deployment"
          echo "ðŸ“¦ Build artifacts available for deployment"
          
      - name: Create deployment tag
        uses: actions/github-script@v7
        with:
          script: |
            const { repo, owner } = context.repo;
            const { sha } = context.payload.head_commit;
            const tagName = `deploy-${new Date().toISOString().slice(0,19).replace(/:/g, '-')}`;
            
            await github.rest.git.createRef({
              owner,
              repo,
              ref: `refs/tags/${tagName}`,
              sha
            });
            
            console.log(`Created deployment tag: ${tagName}`);
